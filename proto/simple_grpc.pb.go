// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: simple.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GoGrpcService_GET_INFO_USER_FullMethodName = "/proto.go_grpcService/GET_INFO_USER"
)

// GoGrpcServiceClient is the client API for GoGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoGrpcServiceClient interface {
	GET_INFO_USER(ctx context.Context, in *ExampleGetRequest, opts ...grpc.CallOption) (*GET_USER_RESULT, error)
}

type goGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoGrpcServiceClient(cc grpc.ClientConnInterface) GoGrpcServiceClient {
	return &goGrpcServiceClient{cc}
}

func (c *goGrpcServiceClient) GET_INFO_USER(ctx context.Context, in *ExampleGetRequest, opts ...grpc.CallOption) (*GET_USER_RESULT, error) {
	out := new(GET_USER_RESULT)
	err := c.cc.Invoke(ctx, GoGrpcService_GET_INFO_USER_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoGrpcServiceServer is the server API for GoGrpcService service.
// All implementations must embed UnimplementedGoGrpcServiceServer
// for forward compatibility
type GoGrpcServiceServer interface {
	GET_INFO_USER(context.Context, *ExampleGetRequest) (*GET_USER_RESULT, error)
	mustEmbedUnimplementedGoGrpcServiceServer()
}

// UnimplementedGoGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoGrpcServiceServer struct {
}

func (UnimplementedGoGrpcServiceServer) GET_INFO_USER(context.Context, *ExampleGetRequest) (*GET_USER_RESULT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GET_INFO_USER not implemented")
}
func (UnimplementedGoGrpcServiceServer) mustEmbedUnimplementedGoGrpcServiceServer() {}

// UnsafeGoGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoGrpcServiceServer will
// result in compilation errors.
type UnsafeGoGrpcServiceServer interface {
	mustEmbedUnimplementedGoGrpcServiceServer()
}

func RegisterGoGrpcServiceServer(s grpc.ServiceRegistrar, srv GoGrpcServiceServer) {
	s.RegisterService(&GoGrpcService_ServiceDesc, srv)
}

func _GoGrpcService_GET_INFO_USER_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGrpcServiceServer).GET_INFO_USER(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGrpcService_GET_INFO_USER_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGrpcServiceServer).GET_INFO_USER(ctx, req.(*ExampleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoGrpcService_ServiceDesc is the grpc.ServiceDesc for GoGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.go_grpcService",
	HandlerType: (*GoGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GET_INFO_USER",
			Handler:    _GoGrpcService_GET_INFO_USER_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simple.proto",
}
